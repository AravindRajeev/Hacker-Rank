'''The D33P language includes three types of tokens: open parentheses, close parentheses, and integers. 
An expression is well-formed if it contains balanced parentheses, and each integer correctly indicates its depth: the number of nested sets of parentheses that surround that integer.
Implement correct depth, which takes a list of tokens as input and returns True if and only if a prefix of the input is a well-formed D33P expression.

Assume that the input contains a balanced set of nested parentheses with single-digit positive integers surrounded by parentheses. 
You only need to check that the integers indicate the correct depths'''
-----------------------------------------------------------------------------------------------------------------------------------------
list('(1)')--->	True
list('(2)')--->	False
list('((2)((3)))')--->	True
list('((3)(2))')--->	False
-------------------------------------------------------------------------------------------------------------------------------------------

def check_correct_depth(input_list, depth=0):
    count=0
    flag=False
    i=0
    while(i<len(input_list)):
        if not input_list[i].isdigit():
           count+=1
           
        else:
            if str(count)==input_list[i]:
                flag=True
            else:
                flag=False
                break
                
            input_list=input_list[:i-1]+input_list[i+2:]
            j=0
            length=len(input_list)
            while(j<length):
                if input_list[j]=='(' and input_list[j+1]==')':
                    del input_list[j]
                    del input_list[j]
                length=len(input_list)
                j+=1
            count=0
            i=-1
        i+=1
    return flag    

input_list1=list('(1)')
input_list2=list('(2)') 
input_list3=list('((2)((3)))') 
input_list4=list('((2)(3))') 
input_list5=list('((3)(2))') 
input_list6=list('(((3)((4))(3))(2)((3)))')
output=check_correct_depth(input_list6) 
print("Input list:",input_list6)
print(output)
